apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: grafana
  namespace: monitoring
spec:
  interval: 10m
  releaseName: grafana
  chart:
    spec:
      # https://artifacthub.io/packages/helm/grafana/grafana
      chart: grafana
      version: "~7.0.19"
      sourceRef:
        kind: HelmRepository
        name: grafana
  install:
    crds: Skip
  upgrade:
    crds: Skip

  valuesFrom:
  - kind: Secret
    name: grafana-helm-secrets

  values:
    # https://github.com/grafana/helm-charts/blob/main/charts/grafana/values.yaml

    resources:
      requests:
        cpu: 100m
        memory: 0.5Gi

    adminUser: admin
    # for `adminPassword` see helm-secrets.yaml
    ingress:
      enabled: true
      ingressClassName: nginx
      hosts:
      - grafana.webwur.st
      tls:
      - secretName: grafana-cert
        hosts:
        - grafana.webwur.st

    networkPolicy:
      enabled: true
      egress:
        enabled: true

    sidecar:
      alerts:
        enabled: true
        label: grafana_alert
      dashboards:
        enabled: true
        label: grafana_dashboard
        provider:
          allowUiUpdates: false
      datasources:
        enabled: true
        label: grafana_datasource
      notifiers:
        enabled: true
        label: grafana_notifier

    # https://github.com/grafana/helm-charts/tree/main/charts/grafana#provision-alert-rules-contact-points-notification-policies-and-notification-templates
    # https://github.com/grafana/helm-charts/tree/main/charts/grafana#high-availability-for-unified-alerting
    # alerting:

    ## Grafana's primary configuration
    ## NOTE: values in map will be converted to ini format
    ## ref: http://docs.grafana.org/installation/configuration/
    ##
    # https://github.com/grafana/helm-charts/tree/main/charts/grafana#how-to-securely-reference-secrets-in-grafanaini
    # https://github.com/grafana/helm-charts/blob/main/charts/grafana/templates/_config.tpl#L10C1-L10C15
    # verify via `$ kubectl exec -ti -n monitoring deployments/grafana -- cat /etc/grafana/grafana.ini`
    grafana.ini:
      # > [i] for defaults see https://grafana.com/docs/grafana/latest/setup-grafana/configure-grafana/#app_mode
      log:
        mode: console
        # Options are “debug”, “info”, “warn”, “error”, and “critical”. Default is info.
        level: info
        # filters: sqlstore:debug

      log.console:
        # Log line format, valid options are text, console and json. Default is console.
        # FIXME what does that mean? is there logfmt?
        format: console

      # unified_alerting.screenshots:
      #   # Note This feature is not supported in Mimir or Loki, or when Grafana is configured to send alerts to other Alertmanagers such as the Prometheus Alertmanager

      news:
        news_feed_enabled: false

      server:
        root_url: "https://{{ if (and .Values.ingress.enabled .Values.ingress.hosts) }}{{ .Values.ingress.hosts | first }}{{ else }}''{{ end }}"
        min_tls_version: TLS1.3
        enforce_domain: true
        # to log all HTTP requests (not just errors)
        router_logging: false
        enable_gzip: true

      analytics:
        reporting_enabled: true
        check_for_updates: false
        check_for_plugin_updates: false
        feedback_links_enabled: false

      security:
        # disable_initial_admin_creation: false
        cookie_secure: true
        cookie_samesite: strict
        strict_transport_security: true
        # content_security_policy: true
        angular_support_enabled: false

      users:
        default_theme: system
        default_language: detect

        # https://grafana.com/docs/grafana/latest/setup-grafana/configure-security/configure-authentication/generic-oauth/#configuration-options
      # auth:
        # signout_redirect_url: http://localhost:8087/realms/grafana/protocol/openid-connect/logout?post_logout_redirect_uri=http%3A%2F%2Flocalhost%3A3000%2Flogin

      # FIXME install dex/github
      # auth:
      #   disable_login_form: true

      # # do NOT split this key...
      # auth.generic_oauth:
      #   enabled: true
      #   name: dex/GitHub
      #   client_id: grafana
      #   auto_login: false
      #   allow_sign_up: true
      #   # for `client_secret` see ./helm-secrets.yaml
      #   auth_url: https://dex.webwur.st/auth
      #   token_url: https://dex.webwur.st/token
      #   api_url: https://dex.webwur.st/userinfo
      #   use_refresh_token: true
      #   # https://dexidp.io/docs/custom-scopes-claims-clients/#scopes
      #   # for refresh token: offline_access
      #   scopes: openid email profile groups offline_access
      #   # scopes: openid profile email offline_access account

        # team_ids:
        # role_attribute_path: contains(groups[*], `SRE`) && 'Admin' || contains(groups[*], `devops`) && 'Admin' || 'Editor'

        # "{{ if (and .Values.ingress.enabled .Values.ingress.hosts) }}{{ .Values.ingress.hosts | first }}{{ else }}''{{ end }}"
