apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: mimir
  namespace: monitoring
spec:
  interval: 0h10m
  releaseName: mimir
  chart:
    spec:
      # https://artifacthub.io/packages/helm/grafana/mimir-distributed
      chart: mimir-distributed
      version: "~5.2.1"
      sourceRef:
        kind: HelmRepository
        name: grafana
  valuesFrom:
  - kind: Secret
    name: mimir-helm-secrets
  values:
    # for default values see https://github.com/grafana/mimir/blob/main/operations/helm/charts/mimir-distributed/values.yaml

    # global:
    #   dnsService: coredns

    configStorageType: Secret

    minio:
      enabled: false

    gateway:
      enabledNonEnterprise: true
      # replicas: 1

      ingress:
        enabled: true
        ingressClassName: nginx
        hosts:
        - host: mimir.webwur.st
          paths:
          - path: /
            pathType: Prefix
        tls:
        - secretName: mimir-cert
          hosts:
          - mimir.webwur.st

      nginx:
        basicAuth:
          enabled: true
          username: basicauth
          # for `password:` see ./helm-secrets.yaml

    mimir:
      # -- Additional structured values on top of the text based 'mimir.config'. Applied after the text based config is evaluated for templates. Enables adding and modifying YAML elements in the evaulated 'mimir.config'.
      # For reference see https://grafana.com/docs/mimir/latest/references/configuration-parameters/
      # https://github.com/grafana/mimir/blob/main/docs/sources/mimir/configure/configuration-parameters/index.md

      # example for single-node local-drive https://github.com/grafana/mimir/blob/main/docs/configurations/demo.yaml

      # https://github.com/grafana/mimir/blob/main/docs/configurations/single-process-config-blocks.yaml
      

      structuredConfig:
        usage_stats:
          enabled: false

        multitenancy_enabled: false

        common:
          storage:
            backend: filesystem
            # filesystem: 

        # blocks_storage:
        #   bucket_store:
        #     sync_dir: /data/tsdb-sync

        #   tsdb:
        #     dir: /data/tsdb
        #     head_compaction_interval: 15m
        #     wal_replay_concurrency: 3


        # alertmanager_storage:
        #   s3.bucket_name: mimir-ruler

        # ruler_storage:
        #   s3.bucket_name: mimir-ruler

        # https://grafana.com/docs/mimir/latest/references/configuration-parameters/#limits
        limits:
          # Delete blocks containing samples older than the specified retention period.
          # Also used by query-frontend to avoid querying beyond the retention period. 0
          # to disable.
          compactor_blocks_retention_period: 60d
          # default 150_000
          max_global_series_per_user: 5000000
          # (tube) Default von 20 ist zu wenig f√ºr die kube-prometheus rules
          ruler_max_rules_per_rule_group: 100
          # Per-tenant ingestion rate limit in samples per second.
          ingestion_rate: 5000
          # Per-tenant allowed ingestion burst size (in number of samples).
          # ingestion_burst_size: <int> | default = 200000

    alertmanager:
      replicas: 1
      persistentVolume:
        enabled: true
        size: 1Gi

    ingester:
      replicas: 1
      persistentVolume:
        enabled: true
        size: 2Gi
      zoneAwareReplication:
        enabled: false

    # https://grafana.com/docs/mimir/latest/references/architecture/components/store-gateway/
    store_gateway:
      replicas: 1
      persistentVolume:
        enabled: true
        size: 50Gi
      zoneAwareReplication:
        enabled: false

    compactor:
      replicas: 1
      persistentVolume:
        enabled: true
        size: 2Gi

    metaMonitoring:
      # Grafana dashboards for Mimir
      dashboards:
        enabled: true
        annotations:
          k8s-sidecar-target-directory: /tmp/dashboards/Mimir Dashboards
        labels:
          grafana_dashboard: "1"

      # ServiceMonitor configuration for monitoring Kubernetes Services with Prometheus Operator and/or Grafana Agent
      serviceMonitor:
        enabled: true

      # Rules for the Prometheus Operator via a PrometheusRule CRD
      prometheusRule:
        enabled: true
        mimirAlerts: true
        mimirRules: true
