apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: nextcloud
spec:
  storageNamespace: flux-system
  install:
    crds: Skip
  upgrade:
    crds: Skip
  interval: 1h0m
  chart:
    spec:
      chart: nextcloud
      # https://artifacthub.io/packages/helm/nextcloud/nextcloud
      version: "~4.6.2"
      sourceRef:
        kind: HelmRepository
        name: nextcloud
  valuesFrom:
  - kind: Secret
    name: nextcloud-helm-secrets
  values:
    # for defaults see https://github.com/nextcloud/helm/blob/main/charts/nextcloud/values.yaml

    # image:
    #   repository: nextcloud
    #   flavor: apache
    #   tag: "{{- printf "%s:%s-%s" .Values.image.repository .Chart.AppVersion .Values.image.flavor -}}"

    nextcloud:
      host: nextcloud.webwur.st
      # username: admin
      # for `password` see ./helm-secrets.yaml

      # PHP Configuration files
      # Will be injected in /usr/local/etc/php/conf.d for apache image and in /usr/local/etc/php-fpm.d when nginx.enabled: true
      # phpConfigs: {}

      # Default config files
      # IMPORTANT: Will be used only if you put extra configs, otherwise default will come from nextcloud itself
      # Default confgurations can be found here: https://github.com/nextcloud/docker/tree/master/16.0/apache/config
      defaultConfigs:
        .htaccess:

      # Extra config files created in /var/www/html/config/
      configs:
        # default configs in container https://github.com/nextcloud/docker/tree/master/28/apache/config
        # from helm chart https://github.com/nextcloud/helm/blob/main/charts/nextcloud/templates/config.yaml
        #
        # https://docs.nextcloud.com/server/latest/admin_manual/configuration_server/config_sample_php_parameters.html

        extra.config.php: |
          <?php
          $CONFIG = array (
            'trusted_proxies' => ['10.0.0.0/8'],
            'overwriteprotocol' => 'https',
            'loglevel' => 5,
          );

        # // 'config_is_read_only' => true,
        # // 'loglevel' => 2,

      extraInitContainers:
      - name: chown-config
        image: alpine
        command:
        - /bin/sh
        - -c
        - chown -R 33:33 /var/www/html/config
        securityContext:
          runAsUser: 0
        volumeMounts:
        - name: nextcloud-main
          mountPath: /var/www/html/config
          subPath: config

    ingress:
      enabled: true
      className: nginx
      tls:
      - secretName: nextcloud-cert
        hosts:
        - nextcloud.webwur.st
      annotations:
        nginx.ingress.kubernetes.io/proxy-body-size: 4G
        nginx.ingress.kubernetes.io/enable-cors: "true"
        nginx.ingress.kubernetes.io/cors-allow-headers: "X-Forwarded-For"
        nginx.ingress.kubernetes.io/server-snippet: |
          server_tokens off;
          proxy_hide_header X-Powered-By;
          rewrite ^/.well-known/webfinger /index.php/.well-known/webfinger last;
          rewrite ^/.well-known/nodeinfo /index.php/.well-known/nodeinfo last;  
          rewrite ^/.well-known/host-meta /public.php?service=host-meta last;
          rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json;
          location = /.well-known/carddav {
            return 301 $scheme://$host/remote.php/dav;
          }
          location = /.well-known/caldav {
            return 301 $scheme://$host/remote.php/dav;
          }
          location = /robots.txt {
            allow all;
            log_not_found off;
            access_log off;
          }
          location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ {
            deny all;
          }
          location ~ ^/(?:autotest|occ|issue|indie|db_|console) {
            deny all;
          }

    # for defaults see https://github.com/bitnami/charts/blob/main/bitnami/postgresql/values.yaml
    postgresql:
      enabled: true
      primary:
        persistence:
          enabled: true
      global:
        postgresql:
          auth:
            database: nextcloud
            username: nextcloud
            # for `password` see ./helm-secrets.yaml
      rbac:
        create: true
      networkPolicy:
        enabled: true
      metrics:
        enabled: true
        serviceMonitor:
          enabled: true

    # for defaults see https://github.com/bitnami/charts/blob/main/bitnami/redis/values.yaml
    redis:
      enabled: true
      auth:
        enabled: true
        # for `password` see ./helm-secrets.yaml

        # # name of an existing secret with RedisÂ® credentials (instead of auth.password), must be created ahead of time
        # existingSecret: ""
        # # Password key to be retrieved from existing secret
        # existingSecretPasswordKey: ""

    internalDatabase:
      enabled: false

    externalDatabase:
      enabled: true
      type: postgresql
      host: postgresql
      database: "{{ .Values.postgresql.global.postgresql.auth.database }}"
      user: "{{ .Values.postgresql.global.postgresql.auth.username }}"
      password: "{{ .Values.postgresql.global.postgresql.auth.password }}"

    cronjob:
      enabled: true
      
    persistence:
      # Nextcloud Data (/var/www/html)
      enabled: true
      # accessMode: ReadWriteOnce
      size: 1Ti

    # resources: 
    #   limits:
    #    cpu: 100m
    #    memory: 128Mi
    #   requests:
    #    cpu: 100m
    #    memory: 128Mi

    metrics:
      enabled: true
      serviceMonitor:
        enabled: true

      service:
        type: ClusterIP
        ## Use serviceLoadBalancerIP to request a specific static IP,
        ## otherwise leave blank
        # loadBalancerIP:
        annotations: null
        #   prometheus.io/scrape: "true"
        #   prometheus.io/port: "9205"
        # labels: {}

    rbac:
      enabled: true
      # serviceaccount:
      #   create: true
      #   name: nextcloud-serviceaccount
      #   annotations: {}


    # https://github.com/nextcloud/helm/issues/272#issuecomment-1717870315
    # > trying to configure OIDC

    # The OAuth2 credentials are only available through K8S secrets, but nextcloud requires the values
    # to be present in one of it's php config files.
    # So, to get the credentials there, this init container will create the php config file
    # by interpolating the credentials from environment variables.
    # The created config file can than later be mounted and used by the nextcloud container

    # extraInitContainers = [{
    #   name  = "nextcloud-oauth2-secret-injector"
    #   image = "busybox"
    #   volumeMounts = [{
    #     mountPath = "/config"
    #     name      = "nextcloud-config-oidc"
    #   }]
    #   env = [{
    #     name = "OIDC_CLIENT_ID"
    #     valueFrom = {
    #       secretKeyRef = {
    #         name = module.oidc_client.secret_name
    #         key  = "client_id"
    #       }
    #     }
    #     }, {
    #     name = "OIDC_CLIENT_SECRET"
    #     valueFrom = {
    #       secretKeyRef = {
    #         name = module.oidc_client.secret_name
    #         key  = "client_secret"
    #       }
    #     }
    #   }]
    #   command = ["/bin/sh"]
    #   args = [
    #     "-c",
    #     "echo -e \"${local.nextcloud_oidc_config_php}\" > /config/oidc.config.php"
    #   ]
    # }]
    # extraVolumeMounts = [{
    #   # Mount the OIDC config we created using the initContainer
    #   name      = "nextcloud-config-oidc"
    #   mountPath = "/var/www/html/config/oidc.config.php"
    #   subPath   = "oidc.config.php"
    # }]
    # extraVolumes = [{
    #   # Create a volume in memory containing the oidc config
    #   name = "nextcloud-config-oidc"
    #   emptyDir = {
    #     medium = "Memory"
    #   }
    # }]

    # lifecycle:
    #   postStartCommand:
    #     - su
    #     - -s
    #     - /bin/sh
    #     - www-data
    #     - -c
    #     - |-
    #       echo "Configuring Nextcloud Apps"
    #       php occ app:enable user_ldap
    #       php occ app:disable firstrunwizard
    #       php occ app:disable sharebymail
    #       php occ app:disable survey_client
    #       php occ ldap:create-empty-config
    #       php occ ldap:set-config s01 hasMemberOfFilterSupport ""
    #       # Etc....
